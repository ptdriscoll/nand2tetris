// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length; 
    field boolean isNegative;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let str = Array.new(maxLength+1);
        let length = 0;
        let isNegative = false;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        let str[length] = 0;        
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int sum, idx;
        
        let sum = 0;
        let idx = 0;
        let isNegative = false;
        
        if (str[idx] = 45) {
            let isNegative = true;
            let idx = idx + 1;
        }
        
        while (idx < length) {
            if (str[idx] > 47 & str[idx] < 58) {
                let sum = (sum * 10) + (str[idx] - 48);
                let idx = idx + 1;
            }
            else {
                if (isNegative) {
                    return -sum;
                }
                return sum;
            }
        }
        
        if (isNegative) {
            return -sum;
        }
        return sum;        
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {      
        var int nextInt, lastDigit;
        
        if (isNegative) {
            let length = 1;
        } 
        
        else {
            let length = 0;
        }
        
        if (val < 0) {
            let val = -val;
            let isNegative = true; 
            do appendChar(45);   
        }        
        
        if (val < 10) { 
            do appendChar(val+48);         
        }
        
        else {
            let nextInt = val/10;
            let lastDigit = val - (nextInt * 10);
            do setInt(nextInt);
            do appendChar(lastDigit+48);
        }        
        
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}